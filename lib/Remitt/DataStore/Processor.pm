#!/usr/bin/perl -w
#
#	$Id$
#	$Author$
#
# Package: Remitt::DataStore::Processor
#
#	Manage REMITT processor queue using SQLite
#

package Remitt::DataStore::Processor;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Remitt::Utilities;
use Remitt::DataStore::Log;
use Data::Dumper;
use Compress::Zlib;
use MIME::Base64;
use DBI;
use POSIX;
use Sys::Syslog;
use File::Path;
use Data::Dumper;

require DBD::SQLite;

# Method: new
#
# 	Constructor
#
sub new {
	my $class = shift;
	my $self = {};
	bless $self, $class;
	return $self;
} # end constructor

# Method: Create
#
# 	Adds a transaction to the processor queue
#
# Parameters:
#
#	$username - Username
#
# 	$data - Original XML used in the transaction
#
# 	$render - Format used in Render plugin
#
# 	$renderoption - Format used in Render plugin
#
# 	$translation - Translation used
#
# 	$transport - Transport used
#
#	$unique - Unique id for job (generated by Remitt::DataStore::Output)
#
# Return:
#
# 	Integer, row ID for job.
#
sub Create {
	my $self = shift;
	my ( $username, $data, $render, $renderoption, $translation, $transport, $unique ) = @_;

	# Make sure database is initialized
	my $_x = $self->Init();

	# Start deflation
	#my $compressed_data = Compress::Zlib::memGzip($data);
	my $compressed_data = encode_base64(Compress::Zlib::memGzip($data));
	#print "original length = ".length($data)."\n";
	#print "compressed_data/base64 length = ".length($compressed_data)."\n";
	#print Dumper($compressed_data);

	# Open appropriate file
	my $d = $self->_Handle();
	my $s = $d->prepare('INSERT INTO queue '.
		'( username, data, render, renderoption, translation, transport, unique_id ) '.
		'VALUES ( ?, ?, ?, ?, ?, ?, ? )');
	my $r = $s->execute(
		$username,		# name of user
		$compressed_data,	# original data, slightly thinner
		$render,		# render plugin
		$renderoption,		# render option
		$translation,		# translation plugin
		$transport,		# transport plugin
		$unique			# unique id
	);

	# Get id to give back
	my $s2 = $d->prepare('SELECT OID FROM queue ORDER BY OID DESC');
	my $r2 = $s2->execute;
	if ($r2) {
		my $data = $s2->fetchrow_arrayref;
		return $data->[0];
	} else {
		return 0;
	}
} # end method Create

# Method: GetQueue
#
# 	Get current processor queue.
#
# Returns:
#
# 	Array of hash of items in processor queue, or undef if none.
#
sub GetQueue {
	my ( $self ) = @_;

	my $log = Remitt::DataStore::Log->new;

	my $_x = $self->Init();
	my $d = $self->_Handle();
	my $s = $d->prepare('SELECT username, data, render, renderoption, translation, transport, unique_id, OID FROM queue ORDER BY OID');
	my $r = $s->execute;
	if ($r) {
		my @results;
		while (my $data = $s->fetchrow_hashref) {
			$log->Log('SYSTEM', 3, 'Remitt.DataStore.Processor', 'found '.$data->{rowid}.' in processor queue');
			push @results, $data;
		}
		return @results;
	} else {
		return undef;
	}
} # end method GetQueue

# Method: Init
#
# 	Initialize the database, if this has not been done so already.
#
# Returns:
#
# 	Boolean, depending on success.
#
sub Init {
	my ( $self ) = @_;

	# Open appropriate file
	my $config = Remitt::Utilities::Configuration ( );
	my $p = $config->val('installation', 'path').'/spool';
	my $f = $p.'/processor.db';
	my $log = Remitt::DataStore::Log->new;
	#print "(file = $f)\n";
	if ( -e $f ) {
		# Skip
		return 1;
	} else {
		$log->Log('SYSTEM', 3, 'Remitt.DataStore.Processor.Init', 'creating '.$f);
		umask 000;
		mkpath($p, 1, 0755);
		my $d = DBI->connect('dbi:SQLite:dbname='.$f, '', '');
		my $s = $d->do('CREATE TABLE queue ( '.
			'username VARCHAR, '.
			'data BLOB, '.
			'render VARCHAR, '.
			'renderoption VARCHAR, '.
			'translation VARCHAR, '.
			'transport VARCHAR, '.
			'unique_id VARCHAR '.
		')');
		if ($s) { return 1; } else { return 0; }
	}
} # end method Init

# Method: RemoveFromQueue
#
# Parameters:
#
# 	$id - Unique OID describing field
#
sub RemoveFromQueue {
	my $self = shift;
	my ( $id ) = @_;

	# Get file size
	my $config = Remitt::Utilities::Configuration ( );

	# Make sure database is initialized
	my $_x = $self->Init();
	my $d = $self->_Handle();
	my $s = $d->prepare('DELETE FROM queue WHERE OID=?');
	my $r = $s->execute($id);
} # end method RemoveFromQueue

# Method: _Handle
# 
# 	Return appropriate database handle
# 	
# Returns:
#
# 	DBI handle
#
sub _Handle {
	my ( $self ) = shift;
	# Open appropriate file
	my $config = Remitt::Utilities::Configuration ( );
	my $f = $config->val('installation', 'path').'/spool/processor.db';
	return DBI->connect('dbi:SQLite:dbname='.$f, '', '');
} # end sub _Handle

sub test {
	$obj = new Remitt::DataStore::Processor->new ( 'test' );
} # end sub test

1;
